/** 
 * 还在使用if else写代码？试试'策略模式'吧！(设计模式:指针对软件开发过程中重复发生的问题的解决办法)
 * 策略指的是计策、谋略，而模式一般指人为整理而成的 在某种场景下重复发生的问题的解决办法，策略看作是
 * '算法'。策略模式就是我们设计一些算法 把它们封装起来 让他们可以相互替换 这样可以轻松地切换不同地算法来解决同一个问题
 * 树与二叉树详解：
 *  树：是一种非线性结构。它遵循 仅有唯一一个根节点 没有节点则为空树；除根节点之外 每个节点都有且仅有唯一一个父节点；节点间
 *  不能形成闭环
 * 节点的深度：从根节点到该节点所经历的边的个数
 * 节点的高度：节点到叶节点的最长路径
 * 树的高度：根节点的高度
 * 高度的计算公式:
 * height(p) = 
 * {
 *   -1 p is an empty subtree i.e null
 *   1 + max(height(p.left), height(p.right)) otherwise
 * }
 * 二叉树：最多仅有两个子节点的的树(最多能分两个叉的树)
 * 平衡二叉树：二叉树中 每个节点的左右子树的高度相差不能大于1
 * 满二叉树：除了叶节点外每个节点都有左右子叶且叶子节点都处在最底层的二叉树
 * 完全二叉树：深度为h 除第h层外 其它各层(1~h-1)的节点数都达到最大个数 第h层所有的节点都连续集中在最左边
*/